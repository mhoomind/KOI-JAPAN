import activeElement from './activeElement.d.ts';
import addClass from './addClass.d.ts';
import addEventListener from './addEventListener.d.ts';
import animate from './animate.d.ts';
import { cancel as cancelAnimationFrame, request as requestAnimationFrame } from './animationFrame.d.ts';
import attribute from './attribute.d.ts';
import childElements from './childElements.d.ts';
import clear from './clear.d.ts';
import closest from './closest.d.ts';
import contains from './contains.d.ts';
import childNodes from './childNodes.d.ts';
import style from './css.d.ts';
import filter from './filterEventHandler.d.ts';
import getComputedStyle from './getComputedStyle.d.ts';
import hasClass from './hasClass.d.ts';
import height from './height.d.ts';
import insertAfter from './insertAfter.d.ts';
import isInput from './isInput.d.ts';
import isVisible from './isVisible.d.ts';
import listen from './listen.d.ts';
import matches from './matches.d.ts';
import nextUntil from './nextUntil.d.ts';
import offset from './offset.d.ts';
import offsetParent from './offsetParent.d.ts';
import ownerDocument from './ownerDocument.d.ts';
import ownerWindow from './ownerWindow.d.ts';
import parents from './parents.d.ts';
import position from './position.d.ts';
import prepend from './prepend.d.ts';
import querySelectorAll from './querySelectorAll.d.ts';
import remove from './remove.d.ts';
import removeClass from './removeClass.d.ts';
import removeEventListener from './removeEventListener.d.ts';
import scrollbarSize from './scrollbarSize.d.ts';
import scrollLeft from './scrollLeft.d.ts';
import scrollParent from './scrollParent.d.ts';
import scrollTo from './scrollTo.d.ts';
import scrollTop from './scrollTop.d.ts';
import siblings from './siblings.d.ts';
import text from './text.d.ts';
import toggleClass from './toggleClass.d.ts';
import transitionEnd from './transitionEnd.d.ts';
import triggerEvent from './triggerEvent.d.ts';
import width from './width.d.ts';
export { addEventListener, removeEventListener, triggerEvent, animate, filter, listen, style, getComputedStyle, attribute, activeElement, ownerDocument, ownerWindow, requestAnimationFrame, cancelAnimationFrame, matches, height, width, offset, offsetParent, position, contains, scrollbarSize, scrollLeft, scrollParent, scrollTo, scrollTop, querySelectorAll, closest, addClass, removeClass, hasClass, toggleClass, transitionEnd, childNodes, childElements, nextUntil, parents, siblings, clear, insertAfter, isInput, isVisible, prepend, remove, text, };
declare const _default: {
    addEventListener: typeof addEventListener;
    removeEventListener: typeof removeEventListener;
    triggerEvent: typeof triggerEvent;
    animate: typeof animate;
    filter: typeof filter;
    listen: typeof listen;
    style: typeof style;
    getComputedStyle: typeof getComputedStyle;
    attribute: typeof attribute;
    activeElement: typeof activeElement;
    ownerDocument: typeof ownerDocument;
    ownerWindow: typeof ownerWindow;
    requestAnimationFrame: typeof globalThis.requestAnimationFrame;
    cancelAnimationFrame: (id: number) => void;
    matches: typeof matches;
    height: typeof height;
    width: typeof width;
    offset: typeof offset;
    offsetParent: typeof offsetParent;
    position: typeof position;
    contains: typeof contains;
    scrollbarSize: typeof scrollbarSize;
    scrollLeft: {
        (node: Element): number;
        (node: Element, val: number): undefined;
    };
    scrollParent: typeof scrollParent;
    scrollTo: typeof scrollTo;
    scrollTop: {
        (node: Element): number;
        (node: Element, val: number): undefined;
    };
    querySelectorAll: typeof querySelectorAll;
    closest: typeof closest;
    addClass: typeof addClass;
    removeClass: typeof removeClass;
    hasClass: typeof hasClass;
    toggleClass: typeof toggleClass;
    transitionEnd: typeof transitionEnd;
    childNodes: typeof childNodes;
    childElements: typeof childElements;
    nextUntil: typeof nextUntil;
    parents: typeof parents;
    siblings: typeof siblings;
    clear: typeof clear;
    insertAfter: typeof insertAfter;
    isInput: typeof isInput;
    isVisible: typeof isVisible;
    prepend: typeof prepend;
    remove: typeof remove;
    text: typeof text;
};
export default _default;
