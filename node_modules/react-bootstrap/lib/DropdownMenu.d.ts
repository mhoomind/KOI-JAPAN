import * as React from 'react';
import { UseDropdownMenuOptions } from '@restart/ui/DropdownMenu';
import type { DynamicRefForwardingComponent } from '@restart/ui/types';
import { type DropDirection } from './DropdownContext';
import type { AlignType } from './types';
export type DropdownMenuVariant = 'dark' | string;
export interface DropdownMenuProps extends React.HTMLAttributes<HTMLElement> {
    /**
     * Control the rendering of the DropdownMenu. All non-menu props
     * (listed here) are passed through to the `as` Component.
     *
     * If providing a custom, non DOM, component. the `show`, `close` and `align` props
     * are also injected and should be handled appropriately.
     */
    as?: React.ElementType | undefined;
    /**
     * @default 'dropdown-menu'
     */
    bsPrefix?: string | undefined;
    /**
     * Controls the visibility of the Dropdown menu
     */
    show?: boolean | undefined;
    /**
     * Whether to render the dropdown menu in the DOM before the first time it is shown
     */
    renderOnMount?: boolean | undefined;
    /**
     * Have the dropdown switch to it's opposite placement when necessary to stay on screen.
     */
    flip?: boolean | undefined;
    /**
     * Aligns the dropdown menu to the specified side of the container. You can also align
     * the menu responsively for breakpoints starting at `sm` and up. The alignment
     * direction will affect the specified breakpoint or larger.
     *
     * *Note: Using responsive alignment will disable Popper usage for positioning.*
     */
    align?: AlignType | undefined;
    /**
     * Which event when fired outside the component will cause it to be closed
     *
     * *Note: For custom dropdown components, you will have to pass the
     * `rootCloseEvent` to `<RootCloseWrapper>` in your custom dropdown menu
     * component ([similarly to how it is implemented in `<Dropdown.Menu>`](https://github.com/react-bootstrap/react-bootstrap/blob/v0.31.5/src/DropdownMenu.js#L115-L119)).*
     */
    rootCloseEvent?: 'click' | 'mousedown' | undefined;
    /**
     * A set of popper options and props passed directly to Popper.
     */
    popperConfig?: UseDropdownMenuOptions['popperConfig'] | undefined;
    /**
     * Menu color variant.
     *
     * Omitting this will use the default light color.
     */
    variant?: DropdownMenuVariant | undefined;
}
export declare function getDropdownMenuPlacement(alignEnd: boolean, dropDirection?: DropDirection, isRTL?: boolean): "bottom" | "top" | "top-start" | "top-end" | "bottom-start" | "bottom-end" | "right-start" | "right-end" | "left-start" | "left-end";
declare const DropdownMenu: DynamicRefForwardingComponent<'div', DropdownMenuProps>;
export default DropdownMenu;
